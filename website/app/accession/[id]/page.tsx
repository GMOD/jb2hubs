import path from 'path'

import Link from 'next/link'
import ReactMarkdown from 'react-markdown'
import slugify from 'slugify'

import { getAccessionById, getAllAccessions } from '../../../lib/api.ts'
import Container from '../../components/Container.tsx'
import { tryAndReadJSON, tryAndReadText } from '../../components/util.ts'

function Link2({
  href,
  children,
}: {
  href: string
  children: React.ReactNode
}) {
  return (
    <Link target="_blank" href={href}>
      {children}
    </Link>
  )
}

export async function generateMetadata({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const ret = await getAccessionById(id)
  if (!ret) {
    throw new Error(`${id} not found`)
  }
  return {
    title: ret.scientificName,
  }
}

export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const ret = await getAccessionById(id)
  if (!ret) {
    throw new Error('accession not found')
  }

  const { scientificName } = ret
  const [base, rest] = id.split('_')
  const [b1, b2, b3] = rest!.match(/.{1,3}/g)!
  const folder = `hubs/${base}/${b1}/${b2}/${b3}/${id}`
  // @ts-expect-error
  const { description } = await tryAndReadJSON<{ description: string }>(
    path.join(process.cwd(), folder, 'description.json'),
  )

  const imgBase = path.join(
    process.cwd(),
    'speciesImages',
    slugify(scientificName),
  )

  const val = await tryAndReadText(imgBase + '.txt')
  const source = await tryAndReadText(imgBase + '_page.txt')
  console.log({ ret })
  return (
    <Container>
      <div className="relative">
        <h1>{scientificName}</h1>
        <h4>Accession: {ret.accession}</h4>
        <h4>Assembly name: {ret.ncbiAssemblyName}</h4>
        <h4>Common name: {ret.commonName}</h4>

        {val ? (
          <div className="float-right ml-6 mb-4 max-w-xs">
            <figure className="m-0">
              <img src={val} className="max-w-full" />
              <figcaption>
                <a href={source}>(source)</a>
              </figcaption>
            </figure>
          </div>
        ) : null}

        {description ? (
          <div>
            <h2>Description</h2>
            <div className="space-y-4">
              <ReactMarkdown>{description}</ReactMarkdown>
              <div>
                <i>
                  (description generated by AI,{' '}
                  <Link href="https://github.com/cmdcolin/jb2hubs/">
                    report errors or suggestions here
                  </Link>
                  )
                </i>
              </div>
            </div>
          </div>
        ) : null}
      </div>

      <div>
        <h2>Genome browsers</h2>
        <ul>
          <li>
            <Link2 href={ret.jbrowseLink}>JBrowse </Link2>
          </li>
          <li>
            <Link2 href={ret.igvBrowserLink}>IGV.js</Link2>
          </li>
          <li>
            <Link2 href={ret.ncbiBrowserLink}>NCBI GDV</Link2>
          </li>
          <li>
            <Link2 href={ret.ucscBrowserLink}>UCSC</Link2>
          </li>
        </ul>
      </div>
      <div>
        <h2>Portals/data downloads</h2>
        <ul>
          <li>
            <Link2 href={ret.ucscDataLink}>UCSC hub folder</Link2>
          </li>
          <li>
            <Link2 href={ret.ncbiLink}>NCBI assembly page</Link2>
          </li>
          <li>
            <Link2
              href={`https://www.ncbi.nlm.nih.gov/datasets/taxonomy/${ret.taxonId}/`}
            >
              NCBI datasets taxonomy page
            </Link2>
          </li>
        </ul>
      </div>
    </Container>
  )
}

export async function generateStaticParams() {
  const posts = await getAllAccessions()
  return posts.map(post => ({
    id: post.id,
  }))
}
