import path from 'path'
import { getAccessionById, getAllAccessions } from '../../../lib/api'
import { tryAndReadJSON } from '../../components/util'
import Link from 'next/link'

function Link2({ href }: { href: string }) {
  return <Link href={href}>{href}</Link>
}

export async function generateMetadata({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const ret = await getAccessionById(id)
  if (!ret) {
    throw new Error(`${id} not found`)
  }
  return {
    title: ret.scientificName,
  }
}

export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const ret = await getAccessionById(id)
  if (!ret) {
    throw new Error('accession not found')
  }

  const [base, rest] = id.split('_')
  const [b1, b2, b3] = rest!.match(/.{1,3}/g)!
  const folder = `hubs/${base}/${b1}/${b2}/${b3}/${id}`
  const { description } = tryAndReadJSON<any>(
    path.join(folder, 'description.json'),
  )
  const { scientificName, accession } = ret
  return (
    <div>
      <div>
        <h1>{scientificName}</h1>
        <h4>{accession}</h4>
      </div>
      <div>
        <h1>Description</h1>
        <div>
          {description} (description generated by AI,{' '}
          <Link href="https://github.com/cmdcolin/jb2hubs/">
            report errors or suggestions
          </Link>
          )
        </div>
      </div>
      <div>
        <h1>Portals/data downloads</h1>
        <div>
          UCSC hub folder: <Link2 href={ret.ucscDataLink} />
        </div>
        <div>
          UCSC hub.txt: <Link2 href={ret.ucscDataLink + 'hub.txt'} />
        </div>
        <div>
          NCBI assembly page: <Link2 href={ret.ncbiLink} />
        </div>
        <div>
          JBrowse config.json: <Link2 href={ret.jbrowseConfig} />
        </div>
      </div>

      <div>
        <h1>Browsers</h1>
        <div>
          JBrowse browser: <Link2 href={ret.jbrowseLink} />
        </div>
        <div>
          IGV.js browser: <Link2 href={ret.igvBrowserLink} />
        </div>
        <div>
          NCBI browser: <Link2 href={ret.ncbiBrowserLink} />
        </div>
      </div>
      <div>
        <h1>Data downloads</h1>
      </div>
    </div>
  )
}

export async function generateStaticParams() {
  const posts = await getAllAccessions()
  return posts.map(post => ({
    id: post.id,
  }))
}
