import path from 'path'
import slugify from 'slugify'

import Link from 'next/link'

import { getAccessionById, getAllAccessions } from '../../../lib/api.ts'
import Container from '../../components/Container.tsx'
import { tryAndReadJSON, tryAndReadText } from '../../components/util.ts'

function Link2({
  href,
  children,
}: {
  href: string
  children: React.ReactNode
}) {
  return (
    <Link target="_blank" href={href}>
      {children}
    </Link>
  )
}

export async function generateMetadata({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const ret = await getAccessionById(id)
  if (!ret) {
    throw new Error(`${id} not found`)
  }
  return {
    title: ret.scientificName,
  }
}

export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const ret = await getAccessionById(id)
  if (!ret) {
    throw new Error('accession not found')
  }

  const { scientificName, accession } = ret
  const [base, rest] = id.split('_')
  const [b1, b2, b3] = rest!.match(/.{1,3}/g)!
  const folder = `hubs/${base}/${b1}/${b2}/${b3}/${id}`
  // @ts-expect-error
  const { description } = await tryAndReadJSON<{ description: string }>(
    path.join(process.cwd(), folder, 'description.json'),
  )

  console.log(
    path.join(process.cwd(), 'speciesImages', slugify(scientificName) + '.txt'),
  )
  const val = await tryAndReadText(
    path.join(process.cwd(), 'speciesImages', slugify(scientificName) + '.txt'),
  )
  return (
    <Container>
      <div>
        <h1>{scientificName}</h1>
        <h4>{accession}</h4>
        {val ? <img src={val} /> : null}
      </div>
      {description ? (
        <div>
          <h1>Description</h1>
          <div className="flex flex-col gap-10">
            {description.split('\n\n').map((r: string, idx: number) => (
              <div key={idx}>{r}</div>
            ))}{' '}
            <div>
              <i>
                (description generated by AI, may contain errors{' '}
                <Link href="https://github.com/cmdcolin/jb2hubs/">
                  report errors or suggestions
                </Link>
                )
              </i>
            </div>
          </div>
        </div>
      ) : null}

      <div>
        <h1>Genome browsers</h1>
        <ul>
          <li>
            <Link2 href={ret.jbrowseLink}>JBrowse </Link2>
          </li>
          <li>
            <Link2 href={ret.igvBrowserLink}>IGV.js</Link2>
          </li>
          <li>
            <Link2 href={ret.ncbiBrowserLink}>NCBI GDV</Link2>
          </li>
          <li>
            <Link2 href={ret.ucscBrowserLink}>UCSC</Link2>
          </li>
        </ul>
      </div>
      <div>
        <h1>Portals/data downloads</h1>
        <ul>
          <li>
            <Link2 href={ret.ucscDataLink}>UCSC hub folder</Link2>
          </li>
          <li>
            <Link2 href={ret.ncbiLink}>NCBI assembly page</Link2>
          </li>
          <li>
            <Link2
              href={`https://www.ncbi.nlm.nih.gov/datasets/taxonomy/${ret.taxonId}/`}
            >
              NCBI datasets taxonomy page
            </Link2>
          </li>
        </ul>
      </div>
    </Container>
  )
}

export async function generateStaticParams() {
  const posts = await getAllAccessions()
  return posts.map(post => ({
    id: post.id,
  }))
}
