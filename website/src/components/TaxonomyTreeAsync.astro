---
interface SpeciesData {
  accession: string
  commonName?: string
  scientificName?: string
  ncbiRefSeqCategory?: string
  suppressed?: boolean
  [key: string]: any
}

interface Props {
  category?: string
  speciesData?: SpeciesData[]
  autoShow?: boolean
  title?: string
  hubsLink?: string
}

const {
  category = 'all',
  speciesData = [],
  autoShow = false,
  title,
  hubsLink,
} = Astro.props

const taxonomyPath = `/taxonomy/${category}.newick`

// Create header HTML if title and hubsLink are provided
let headerHtml = ''
if (title && hubsLink) {
  headerHtml = `
    <h1 style="margin: 0;">GenArk taxonomy - ${title}</h1>
    <a href="${hubsLink}" style="color: #2563eb; text-decoration: underline;">
      View list of species as table for ${title}
    </a>
  `
}
---

<div id="taxonomy-tree-container">
  {!autoShow && (
    <button id="show-taxonomy-btn" class="show-tree-btn">Show taxonomy</button>
  )}
  <div id="taxonomy-tree-content" style={autoShow ? '' : 'display: none;'}>
    <div id="loading-state" style="padding: 16px; border: 1px solid #d1d5db; background-color: #f9fafb; border-radius: 4px;">
      <p>Loading taxonomy...</p>
    </div>
    <div id="error-state" style="display: none; padding: 16px; border: 1px solid #fca5a5; background-color: #fef2f2; border-radius: 4px;">
      <h3 style="color: #991b1b; font-weight: 600;">Error loading taxonomy</h3>
      <p id="error-message" style="color: #dc2626;"></p>
    </div>
    <div id="tree-container"></div>
  </div>
</div>

<script define:vars={{ taxonomyPath, speciesData: JSON.stringify(speciesData), headerHtml, autoShow }}>
  let newickData = null
  let hasLoaded = false

  async function loadTaxonomy() {
    if (hasLoaded) return

    const loadingState = document.getElementById('loading-state')
    const errorState = document.getElementById('error-state')
    const treeContainer = document.getElementById('tree-container')

    try {
      const response = await fetch(taxonomyPath)
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      newickData = await response.text()
      hasLoaded = true

      // Hide loading state
      if (loadingState) loadingState.style.display = 'none'

      // Render the tree
      renderTree()
    } catch (e) {
      if (loadingState) loadingState.style.display = 'none'
      if (errorState) {
        errorState.style.display = 'block'
        const errorMessage = document.getElementById('error-message')
        if (errorMessage) {
          errorMessage.textContent = e instanceof Error ? e.message : 'An unknown error occurred'
        }
      }
    }
  }

  function renderTree() {
    const treeContainer = document.getElementById('tree-container')
    if (!treeContainer || !newickData) return

    // Import and render the tree component
    // Since we can't directly import Astro components in client-side JS,
    // we'll need to fetch the rendered HTML
    // For now, create a simpler inline version or we need to structure this differently

    // Alternative: Make an API endpoint that returns the rendered tree
    // Or: Load the tree data and recreate the rendering logic here

    // Let's parse and render inline
    const speciesDataParsed = JSON.parse(speciesData)
    const html = renderTaxonomyTree(newickData, speciesDataParsed, headerHtml)
    treeContainer.innerHTML = html
  }

  function parseNewick(newick) {
    const cleanNewick = newick.trim().replace(/;$/, '')
    if (!cleanNewick) return null

    let index = 0

    function parseNode() {
      const node = { children: [] }

      if (cleanNewick[index] === '(') {
        index++
        do {
          const child = parseNode()
          child.parent = node
          node.children.push(child)
          if (cleanNewick[index] === ',') {
            index++
          }
        } while (
          cleanNewick[index] === ',' ||
          (cleanNewick[index] !== ')' && index < cleanNewick.length)
        )
        if (cleanNewick[index] === ')') {
          index++
        }
      }

      let name = ''
      while (
        index < cleanNewick.length &&
        cleanNewick[index] !== ',' &&
        cleanNewick[index] !== ')' &&
        cleanNewick[index] !== '(' &&
        cleanNewick[index] !== ':'
      ) {
        name += cleanNewick[index]
        index++
      }

      if (name) {
        const accessionMatch = name.match(/^(.+?)\[([^\]]+)\]$/)
        if (accessionMatch) {
          node.name = accessionMatch[1]
          node.accession = accessionMatch[2]
        } else {
          node.name = name
        }
      }

      if (cleanNewick[index] === ':') {
        index++
        let lengthStr = ''
        while (
          index < cleanNewick.length &&
          cleanNewick[index] !== ',' &&
          cleanNewick[index] !== ')' &&
          cleanNewick[index] !== '('
        ) {
          lengthStr += cleanNewick[index]
          index++
        }
        node.branchLength = parseFloat(lengthStr) || 0
      }

      return node
    }

    try {
      return parseNode()
    } catch (error) {
      console.error('Error parsing Newick string:', error)
      return null
    }
  }

  function convertToHierarchicalTree(node) {
    let nodeCounter = 0

    function traverse(n, depth) {
      const id = `node_${nodeCounter++}`

      if (
        n.children &&
        n.children.length === 1 &&
        (!n.children[0].children || n.children[0].children.length === 0) &&
        n.name === n.children[0].name &&
        n.children[0].accession
      ) {
        return {
          id,
          name: n.name,
          accession: n.children[0].accession,
          branchLength: n.children[0].branchLength,
          children: undefined,
          depth,
          isLeaf: true,
        }
      }

      const childNodes = []
      if (n.children && n.children.length > 0) {
        for (const child of n.children) {
          childNodes.push(traverse(child, depth + 1))
        }
      }

      return {
        id,
        name: n.name,
        accession: n.accession,
        branchLength: n.branchLength,
        children: childNodes.length > 0 ? childNodes : undefined,
        depth,
        isLeaf: !n.children || n.children.length === 0,
      }
    }

    return traverse(node, 0)
  }

  function renderTreeNode(node, speciesDataMap) {
    const hasChildren = node.children && node.children.length > 0
    const indent = node.depth * 20
    const speciesInfo = node.accession ? speciesDataMap.get(node.accession) : undefined

    if (hasChildren) {
      // Use <details> for expandable nodes
      let html = `
        <details class="tree-node" open style="padding-left: ${indent}px;">
          <summary class="tree-summary" style="background-color: ${node.depth % 2 === 0 ? '#ffffff' : '#f9fafb'};">
            <div class="tree-content">
              <span style="color: #1f2937;">
                ${node.name || 'Unnamed'}
              </span>
      `

      if (node.name) {
        const encodedName = encodeURIComponent(node.name)
        html += `
              <a
                href="https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?searchTerm=${encodedName}&searchMode=complete+name&lock=1&unlock=1&command=search"
                target="_blank"
                rel="noopener noreferrer"
                class="tree-link"
              >
                [?]
              </a>
        `
      }

      if (speciesInfo?.commonName) {
        html += `
              <span style="color: #6b7280;">
                (${speciesInfo.commonName})
              </span>
        `
      }

      if (node.accession) {
        html += `
              <a href="/accession/${node.accession}" class="tree-link tree-link-underline">
                (info)
              </a>
              <span class="accession-badge">
                ${node.accession}
              </span>
        `
      }

      if (speciesInfo?.ncbiRefSeqCategory === 'reference genome') {
        html += `
              <span title="NCBI designated reference">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="orange" stroke="orange" stroke-width="0" style="display: inline-block; vertical-align: middle;">
                  <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                </svg>
              </span>
        `
      }

      if (speciesInfo?.suppressed) {
        html += `
              <span title="NCBI RefSeq suppressed">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="red" stroke-width="2" style="display: inline-block; vertical-align: middle;">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </span>
        `
      }

      if (node.branchLength !== undefined && node.branchLength !== 1.0) {
        html += `
              <span style="color: #6b7280;">
                [${node.branchLength.toFixed(4)}]
              </span>
        `
      }

      html += `
            </div>
          </summary>
      `

      // Render children
      for (const child of node.children) {
        html += renderTreeNode(child, speciesDataMap)
      }

      html += `</details>`
      return html
    } else {
      // Leaf node - no details element needed
      let html = `
        <div class="tree-leaf" style="padding-left: ${indent}px; background-color: ${node.depth % 2 === 0 ? '#ffffff' : '#f9fafb'};">
          <div class="tree-content">
            <span style="margin-right: 8px;">â€¢</span>
            <span style="color: #374151;">
              ${node.name || 'Unnamed'}
            </span>
      `

      if (node.name) {
        const encodedName = encodeURIComponent(node.name)
        html += `
            <a
              href="https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?searchTerm=${encodedName}&searchMode=complete+name&lock=1&unlock=1&command=search"
              target="_blank"
              rel="noopener noreferrer"
              class="tree-link"
            >
              [?]
            </a>
        `
      }

      if (speciesInfo?.commonName) {
        html += `
            <span style="color: #6b7280;">
              (${speciesInfo.commonName})
            </span>
        `
      }

      if (node.accession) {
        html += `
            <a href="/accession/${node.accession}" class="tree-link tree-link-underline">
              (info)
            </a>
            <span class="accession-badge">
              ${node.accession}
            </span>
        `
      }

      if (speciesInfo?.ncbiRefSeqCategory === 'reference genome') {
        html += `
            <span title="NCBI designated reference">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="orange" stroke="orange" stroke-width="0" style="display: inline-block; vertical-align: middle;">
                <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
              </svg>
            </span>
        `
      }

      if (speciesInfo?.suppressed) {
        html += `
            <span title="NCBI RefSeq suppressed">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="red" stroke-width="2" style="display: inline-block; vertical-align: middle;">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </span>
        `
      }

      if (node.branchLength !== undefined && node.branchLength !== 1.0) {
        html += `
            <span style="color: #6b7280;">
              [${node.branchLength.toFixed(4)}]
            </span>
        `
      }

      html += `
          </div>
        </div>
      `
      return html
    }
  }

  function countAccessions(node) {
    if (!node) return 0
    let count = node.accession ? 1 : 0
    if (node.children) {
      for (const child of node.children) {
        count += countAccessions(child)
      }
    }
    return count
  }

  function renderTaxonomyTree(newickData, speciesData, headerHtml) {
    const speciesDataMap = new Map()
    speciesData.forEach(species => {
      speciesDataMap.set(species.accession, species)
    })

    const parsedTree = parseNewick(newickData)
    if (!parsedTree) {
      return `
        <div style="padding: 16px; border: 1px solid #fca5a5; background-color: #fef2f2; border-radius: 4px;">
          <h3 style="color: #991b1b; font-weight: 600; margin-bottom: 8px;">
            Error loading phylogenetic tree
          </h3>
          <p style="color: #dc2626;">Failed to parse Newick data</p>
        </div>
      `
    }

    const tree = convertToHierarchicalTree(parsedTree)
    const accessionCount = countAccessions(tree)
    const treeHtml = renderTreeNode(tree, speciesDataMap)

    return `
      <div style="padding: 16px;">
        <div style="margin-bottom: 16px; display: flex; gap: 8px; align-items: baseline; flex-wrap: wrap;">
          ${headerHtml}
          <div style="${headerHtml ? 'margin-left: auto;' : ''} display: flex; gap: 8px; align-items: center; flex-wrap: wrap;">
            <div style="color: #6b7280;">${accessionCount} accessions</div>
          </div>
        </div>
        <div
          id="taxonomy-tree-inner"
          style="border: 1px solid #d1d5db; border-radius: 4px; overflow-y: auto; max-height: 600px;"
        >
          ${treeHtml}
        </div>
      </div>
    `
  }


  // Show taxonomy button handler
  const showBtn = document.getElementById('show-taxonomy-btn')
  if (showBtn) {
    showBtn.addEventListener('click', () => {
      const content = document.getElementById('taxonomy-tree-content')
      if (content) {
        content.style.display = 'block'
      }
      showBtn.style.display = 'none'
      loadTaxonomy()
    })
  }

  // Auto-load if autoShow is true
  if (autoShow) {
    loadTaxonomy()
  }
</script>

<style>
  .show-tree-btn {
    padding: 8px 16px;
    background-color: #2563eb;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
  }

  .show-tree-btn:hover {
    background-color: #1d4ed8;
  }

  /* Pure CSS tree styles */
  .tree-node {
    margin: 0;
    padding-left: 0;
  }

  .tree-summary {
    display: flex;
    align-items: center;
    padding: 8px 16px;
    border-bottom: 1px solid #e5e7eb;
    cursor: pointer;
    list-style: none;
  }

  .tree-summary::-webkit-details-marker {
    display: none;
  }

  .tree-summary::marker {
    display: none;
  }

  .tree-summary:hover {
    background-color: #f3f4f6 !important;
  }

  .tree-content {
    display: flex;
    align-items: center;
    gap: 8px;
    flex-wrap: wrap;
  }

  .tree-leaf {
    display: flex;
    align-items: center;
    padding: 8px 16px;
    border-bottom: 1px solid #e5e7eb;
  }

  .tree-leaf:hover {
    background-color: #f3f4f6 !important;
  }

  .tree-link {
    color: #2563eb;
    text-decoration: none;
  }

  .tree-link-underline {
    text-decoration: underline;
  }

  .accession-badge {
    color: #2563eb;
    background-color: #eff6ff;
    padding: 2px 6px;
    border-radius: 4px;
  }

  /* Add chevron indicator using CSS */
  .tree-summary::before {
    content: 'â–¶';
    display: inline-block;
    margin-right: 8px;
    transition: transform 0.2s;
  }

  details[open] > .tree-summary::before {
    transform: rotate(90deg);
  }
</style>
